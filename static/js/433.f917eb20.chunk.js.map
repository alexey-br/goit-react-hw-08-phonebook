{"version":3,"file":"static/js/433.f917eb20.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/validationSchema.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(filter)\n    );\n  }\n);\n","import * as yup from 'yup';\n\nexport const schema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagna\"\n    )\n    .min(5, 'To short. Minimum 5 letters')\n    .max(30, 'To long. Maximum 30 letters')\n    .required(),\n  number: yup\n    .string()\n    .trim()\n    .min(8, 'To short. Minimum 8 digits')\n    .max(30, 'To long. Maximum 30 digits')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n","import { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { schema } from './validationSchema';\nimport { addContact } from 'redux/contacts/operations';\nimport { Box, TextField, Button, FormHelperText } from '@mui/material';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n\n          m: '20px 0',\n          gap: 3,\n        }}\n      >\n        <Box sx={{ position: 'reletive' }}>\n          <TextField\n            name=\"name\"\n            id=\"name\"\n            label=\"Name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            autoComplete=\"off\"\n            size=\"small\"\n            fullWidth={true}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n          />\n          <FormHelperText error={true} sx={{ position: 'absolute' }}>\n            {formik.touched.name && formik.errors.name}\n          </FormHelperText>\n        </Box>\n\n        <Box>\n          <TextField\n            type=\"tel\"\n            name=\"number\"\n            id=\"number\"\n            label=\"Number\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            autoComplete=\"off\"\n            size=\"small\"\n            fullWidth={true}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n          />\n          <FormHelperText error={true} sx={{ position: 'absolute' }}>\n            {formik.touched.number && formik.errors.number}\n          </FormHelperText>\n        </Box>\n        <Button type=\"submit\" variant=\"outlined\" size=\"small\">\n          Add contact\n        </Button>\n      </Box>\n    </form>\n  );\n}\n","import { TextField } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onInput = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  return (\n    <TextField\n      label=\"search\"\n      variant=\"standard\"\n      fullWidth\n      type=\"search\"\n      value={filter}\n      onChange={onInput}\n      sx={{ mb: 2 }}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Box, IconButton, Typography } from '@mui/material';\nimport PhoneOutlinedIcon from '@mui/icons-material/PhoneInTalkOutlined';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\n\nexport default function ContactsItem({ contact }) {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n      }}\n    >\n      <Typography\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          minWidth: 240,\n        }}\n      >\n        <PhoneOutlinedIcon sx={{ mr: 1 }} /> {name}\n      </Typography>\n      <Typography sx={{ flexGrow: 1 }}>{number}</Typography>\n      <IconButton type=\"button\" onClick={() => handleDelete(id)} size=\"small\">\n        <DeleteOutlineOutlinedIcon />\n      </IconButton>\n    </Box>\n  );\n}\n\nContactsItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport ContactsItem from '../ContactsItem';\n\nexport default function ContactList() {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul>\n      {filteredContacts.map(contact => {\n        return (\n          <li key={contact.id}>\n            <ContactsItem contact={contact} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { setError } from 'redux/contacts/contactsSlice';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport {\n  ErrorMessage,\n  Loader,\n  Notification,\n} from '../components/reusableComponents';\nimport { Box, Typography } from '@mui/material';\nimport { useState } from 'react';\nimport { useRef } from 'react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const prevContacts = useRef(0);\n  const [toast, setToast] = useState('');\n  const [toastType, setToastType] = useState('info');\n  const [isToastOpen, setIsToastOpen] = useState(false);\n\n  useEffect(() => {\n    if (prevContacts.current === 0) {\n      prevContacts.current = contacts.length;\n      return;\n    }\n    if (contacts.length > prevContacts.current) {\n      setToastType('info');\n      setToast(\n        `One contact was added. There are ${contacts.length} contacts in phonebook now.`\n      );\n      setIsToastOpen(true);\n    }\n    if (contacts.length < prevContacts.current) {\n      setToastType('warning');\n      setToast(`One contact was deleted, ${contacts.length} contacts left.`);\n      setIsToastOpen(true);\n    }\n\n    prevContacts.current = contacts.length;\n  }, [contacts]);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box sx={{ maxWidth: 500, m: '0 auto' }}>\n      <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n        Phonebook\n      </Typography>\n\n      <ContactForm />\n\n      <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n        Contacts:\n      </Typography>\n\n      <Filter />\n\n      {!error ? (\n        <ContactList />\n      ) : (\n        <ErrorMessage error={error} setError={setError} />\n      )}\n      {isLoading && <Loader />}\n      <Notification\n        open={isToastOpen}\n        setIsToastOpen={setIsToastOpen}\n        text={toast}\n        toastType={toastType}\n      />\n    </Box>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","name","toLocaleLowerCase","includes","schema","yup","shape","trim","matches","min","max","required","number","initialValues","ContactForm","dispatch","useDispatch","formik","useFormik","validationSchema","onSubmit","resetForm","addContact","handleSubmit","Box","sx","display","flexDirection","m","gap","position","TextField","id","label","value","values","onChange","handleChange","autoComplete","size","fullWidth","touched","Boolean","errors","FormHelperText","type","Button","variant","Filter","useSelector","e","changeFilter","target","mb","ContactsItem","contact","alignItems","Typography","minWidth","mr","flexGrow","IconButton","onClick","contactId","deleteContact","DeleteOutlineOutlined","ContactList","filteredContacts","map","Contacts","prevContacts","useRef","useState","toast","setToast","toastType","setToastType","isToastOpen","setIsToastOpen","useEffect","current","length","fetchContacts","maxWidth","component","align","setError","open","text"],"sourceRoot":""}