{"version":3,"file":"static/js/715.b3029f83.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/validationSchema.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactsItem/ContactsItem.styled.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(filter)\n    );\n  }\n);\n","import * as yup from 'yup';\n\nexport const schema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagna\"\n    )\n    .min(5, 'To short. Minimum 5 letters')\n    .max(30, 'To long. Maximum 30 letters')\n    .required(),\n  number: yup\n    .string()\n    .trim()\n    .min(8, 'To short. Minimum 8 digits')\n    .max(30, 'To long. Maximum 30 digits')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n","import { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { schema } from './validationSchema';\nimport { addContact } from 'redux/contacts/operations';\nimport { Box, TextField, Button, FormHelperText } from '@mui/material';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n\n          m: '20px 0',\n          gap: 3,\n        }}\n      >\n        <Box sx={{ position: 'reletive' }}>\n          <TextField\n            name=\"name\"\n            id=\"name\"\n            label=\"Name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            autoComplete=\"off\"\n            size=\"small\"\n            fullWidth={true}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n          />\n          <FormHelperText error={true} sx={{ position: 'absolute' }}>\n            {formik.touched.name && formik.errors.name}\n          </FormHelperText>\n        </Box>\n\n        <Box>\n          <TextField\n            type=\"tel\"\n            name=\"number\"\n            id=\"number\"\n            label=\"Number\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            autoComplete=\"off\"\n            size=\"small\"\n            fullWidth={true}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n          />\n          <FormHelperText error={true} sx={{ position: 'absolute' }}>\n            {formik.touched.number && formik.errors.number}\n          </FormHelperText>\n        </Box>\n        <Button type=\"submit\" variant=\"outlined\" size=\"small\">\n          Add contact\n        </Button>\n      </Box>\n    </form>\n  );\n}\n","import { TextField } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onInput = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  return (\n    <TextField\n      label=\"search\"\n      variant=\"standard\"\n      fullWidth\n      type=\"search\"\n      value={filter}\n      onChange={onInput}\n      sx={{ mb: 2 }}\n    />\n  );\n}\n","import styled from '@emotion/styled';\nimport { IoIosContact } from 'react-icons/io';\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  list-style: none;\n\n  :not(:last-child) {\n  }\n`;\n\nexport const ContactIcon = styled(IoIosContact)``;\n\nexport const ContactName = styled.span`\n  display: inline-block;\n  min-width: 150px;\n`;\n\nexport const ContactNumber = styled.span`\n  display: inline-block;\n  min-width: 170px;\n`;\n\nexport const DeleteBtn = styled.button`\n  font-family: inherit;\n  cursor: pointer;\n  opacity: 0.3;\n\n  transition: transform, 250ms;\n  transition: opacity, 250ms ease-in-out;\n\n  :hover {\n    opacity: 1;\n  }\n\n  :active {\n    transform: translateY(2px);\n  }\n`;\n","import { Box, Typography } from '@mui/material';\nimport PhoneOutlinedIcon from '@mui/icons-material/PhoneOutlined';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactNumber, DeleteBtn } from './ContactsItem.styled';\n\nexport default function ContactsItem({ contact }) {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 1,\n      }}\n    >\n      <Typography\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <PhoneOutlinedIcon sx={{ mr: 1 }} /> {name}\n      </Typography>\n      <ContactNumber>{number}</ContactNumber>\n      <DeleteBtn onClick={() => handleDelete(id)}>Delete</DeleteBtn>\n    </Box>\n  );\n}\n\nContactsItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport ContactsItem from '../ContactsItem';\n\nexport default function ContactList() {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul>\n      {filteredContacts.map(contact => {\n        return (\n          <li key={contact.id}>\n            <ContactsItem contact={contact} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport {\n  ErrorMessage,\n  // HeaderH2,\n  Loader,\n} from '../components/reusableComponents';\nimport { Box, Typography } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box sx={{ maxWidth: 500, m: '0 auto' }}>\n      <Typography variant=\"h4\" component=\"h1\" align=\"center\">\n        Phonebook\n      </Typography>\n      <ContactForm />\n      <Typography variant=\"h5\" component=\"h2\" align=\"center\">\n        Contacts:\n      </Typography>\n      <Filter />\n      {!error ? <ContactList /> : <ErrorMessage />}\n      {isLoading && <Loader />}\n    </Box>\n  );\n}\n"],"names":["selectIsLoading","state","contacts","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","items","name","toLocaleLowerCase","includes","schema","yup","shape","trim","matches","min","max","required","number","initialValues","ContactForm","dispatch","useDispatch","formik","useFormik","validationSchema","onSubmit","resetForm","addContact","handleSubmit","Box","sx","display","flexDirection","m","gap","position","TextField","id","label","value","values","onChange","handleChange","autoComplete","size","fullWidth","touched","Boolean","errors","FormHelperText","type","Button","variant","Filter","useSelector","e","changeFilter","target","mb","ContactNumber","styled","IoIosContact","DeleteBtn","ContactsItem","contact","justifyContent","alignItems","Typography","PhoneOutlined","mr","onClick","contactId","deleteContact","ContactList","filteredContacts","map","Contacts","useEffect","fetchContacts","maxWidth","component","align"],"sourceRoot":""}